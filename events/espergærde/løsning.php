<?php
	/////////////////////////// Indlæser data /////////////////////////////////
	///////////////////////// Gå til linje 55 /////////////////////////////////

// Vi skal lave en distance funktion,
// der giver os afstanden mellem to vektorer
function dist($u, $v){
	$d = 0;
	for ($i=0; $i < count($u) ; $i++) {
		$d += ($u[$i] - $v[$i]) * ($u[$i] - $v[$i]);
	}
	return $d;
}


// En funktion der tager 3 labels og retunerer 1 eller -1
function guessLabel($vec){
	$result = 0;
	for ($i=0; $i < count($vec) ; $i++) {
		$result += $vec[$i];
	}
    if($result < 0){
        return -1;
    }
    else{
        return 1;
    }
}


// En funktion der soterer en array på 3, så den største er først.
function sortClose($list){
    $newList = [[0,0], [0,0], [0,0]];
    if($list[0][1] > $list[1][1] && $list[0][1] > $list[2][1]){
        $newList = [$list[0], $list[1], $list[2]];
    }
    elseif ($list[1][1] > $list[0][1] && $list[1][1] > $list[2][1]) {
        $newList = [$list[1], $list[0], $list[2]];
    }
    elseif ($list[2][1] > $list[0][1] && $list[2][1] > $list[1][1]) {
        $newList = [$list[2], $list[0], $list[1]];
    }
    return $newList;
}


// Vi vil gerne finde de tre vektorer der er tættest på den nye
function getClosets($p, $data){
	$close = [
		[0, dist($data[0][1], $p)],
		[1, dist($data[1][1], $p)],
		[2, dist($data[2][1], $p)]
	];
    $close = sortClose($close);
	for ($i=3; $i <count($data) ; $i++) {
        $newDist = dist($p, $data[$i][1]);
        if($newDist < $close[0][1]){
            $close[0] = [$i, $newDist];
            $close = sortClose($close);
        }
	}
    return $close;
}


// Tager et punkt og fortæller hvad label det skal have
function NearestNeighbours($p, $data){
    $close = getClosets($p, $data);

    // Find labels
    $label0 = $data[$close[0][0]][0];
    $label1 = $data[$close[1][0]][0];
    $label2 = $data[$close[2][0]][0];

    $labels = [$label0, $label1, $label2];

    return guessLabel($labels);
}


//////////////////////////////////////////////////////////////////////////////
/////////////////  Herfra  skal der ikke laves noget //////////////////////////
/////////// Koden herunder indlæser data og måler hvor god den er ////////////
//////////////////////////////////////////////////////////////////////////////
function computeError($data){
    $nrRight = 0;
    $nrWrong = 0;
    for ($i=0; $i < count($data) ; $i++) {
        if($data[$i][0] == NearestNeighbours($data[$i][1], $data)){
            $nrRight += 1;
        }
        else{
            $nrWrong += 1;
        }
    }
    echo "Den havde ret " . $nrRight . " gange\n";
    echo "Den tog fejl "  . $nrWrong . " gange\n";
    echo "Succesrate: " . $nrRight / ($nrWrong + $nrRight) * 100 . "%\n";
}
$data = [
[1, [1, 5, 1, 1, 1, 2, 1, 3, 1, 1]], [1, [1, 5, 4, 4, 5, 7, 10, 3, 2, 1]],
[1, [1, 3, 1, 1, 1, 2, 2, 3, 1, 1]], [1, [1, 6, 8, 8, 1, 3, 4, 3, 7, 1]],
[1, [1, 4, 1, 1, 3, 2, 1, 3, 1, 1]], [-1, [1, 8, 10, 10, 8, 7, 10, 9, 7, 1]],
[1, [1, 1, 1, 1, 1, 2, 10, 3, 1, 1]], [1, [1, 2, 1, 2, 1, 2, 1, 3, 1, 1]],
[1, [1, 2, 1, 1, 1, 2, 1, 1, 1, 5]], [1, [1, 4, 2, 1, 1, 2, 1, 2, 1, 1]],
[1, [1, 1, 1, 1, 1, 1, 1, 3, 1, 1]], [1, [1, 2, 1, 1, 1, 2, 1, 2, 1, 1]],
[-1, [1, 5, 3, 3, 3, 2, 3, 4, 4, 1]], [1, [1, 1, 1, 1, 1, 2, 3, 3, 1, 1]],
[-1, [1, 8, 7, 5, 10, 7, 9, 5, 5, 4]], [-1, [1, 7, 4, 6, 4, 6, 1, 4, 3, 1]],
[1, [1, 4, 1, 1, 1, 2, 1, 2, 1, 1]], [1, [1, 4, 1, 1, 1, 2, 1, 3, 1, 1]],
[-1, [1, 10, 7, 7, 6, 4, 10, 4, 1, 2]], [1, [1, 6, 1, 1, 1, 2, 1, 3, 1, 1]],
[-1, [1, 7, 3, 2, 10, 5, 10, 5, 4, 4]], [-1, [1, 10, 5, 5, 3, 6, 7, 7, 10, 1]],
[1, [1, 3, 1, 1, 1, 2, 1, 2, 1, 1]], [-1, [1, 8, 4, 5, 1, 2, 1, 7, 3, 1]],
[1, [1, 1, 1, 1, 1, 2, 1, 3, 1, 1]], [-1, [1, 5, 2, 3, 4, 2, 7, 3, 6, 1]],
[1, [1, 3, 2, 1, 1, 1, 1, 2, 1, 1]], [1, [1, 5, 1, 1, 1, 2, 1, 2, 1, 1]],
[1, [1, 2, 1, 1, 1, 2, 1, 2, 1, 1]], [1, [1, 1, 1, 3, 1, 2, 1, 1, 1, 1]],
[1, [1, 3, 1, 1, 1, 1, 1, 2, 1, 1]], [1, [1, 2, 1, 1, 1, 2, 1, 3, 1, 1]],
[-1, [1, 10, 7, 7, 3, 8, 5, 7, 4, 3]], [1, [1, 2, 1, 1, 2, 2, 1, 3, 1, 1]],
[1, [1, 3, 1, 2, 1, 2, 1, 2, 1, 1]], [1, [1, 2, 1, 1, 1, 2, 1, 2, 1, 1]],
[-1, [1, 10, 10, 10, 8, 6, 1, 8, 9, 1]], [1, [1, 6, 2, 1, 1, 1, 1, 7, 1, 1]],
[-1, [1, 5, 4, 4, 9, 2, 10, 5, 6, 1]], [-1, [1, 2, 5, 3, 3, 6, 7, 7, 5, 1]],
[1, [1, 6, 6, 6, 9, 6, 5, 7, 8, 1]], [-1, [1, 10, 4, 3, 1, 3, 3, 6, 5, 2]],
[-1, [1, 6, 10, 10, 2, 8, 10, 7, 3, 3]], [-1, [1, 5, 6, 5, 6, 10, 1, 3, 1, 1]],
[-1, [1, 10, 10, 10, 4, 8, 1, 8, 10, 1]], [1, [1, 1, 1, 1, 1, 2, 1, 2, 1, 2]],
[-1, [1, 3, 7, 7, 4, 4, 9, 4, 8, 1]], [1, [1, 1, 1, 1, 1, 2, 1, 2, 1, 1]],
[1, [1, 4, 1, 1, 3, 2, 1, 3, 1, 1]], [-1, [1, 7, 8, 7, 2, 4, 8, 3, 8, 2]],
[-1, [1, 9, 5, 8, 1, 2, 3, 2, 1, 5]], [-1, [1, 5, 3, 3, 4, 2, 4, 3, 4, 1]],
[-1, [1, 10, 3, 6, 2, 3, 5, 4, 10, 2]], [-1, [1, 5, 5, 5, 8, 10, 8, 7, 3, 7]],
[-1, [1, 10, 5, 5, 6, 8, 8, 7, 1, 1]], [-1, [1, 10, 6, 6, 3, 4, 5, 3, 6, 1]],
[-1, [1, 8, 10, 10, 1, 3, 6, 3, 9, 1]], [-1, [1, 8, 2, 4, 1, 5, 1, 5, 4, 4]],
[-1, [1, 5, 2, 3, 1, 6, 10, 5, 1, 1]], [-1, [1, 9, 5, 5, 2, 2, 2, 5, 1, 1]],
[-1, [1, 5, 3, 5, 5, 3, 3, 4, 10, 1]], [1, [1, 1, 1, 1, 1, 2, 2, 2, 1, 1]],
[-1, [1, 9, 10, 10, 1, 10, 8, 3, 3, 1]], [-1, [1, 6, 3, 4, 1, 5, 2, 3, 9, 1]],
[1, [1, 1, 1, 1, 1, 2, 1, 2, 1, 1]], [-1, [1, 10, 4, 2, 1, 3, 2, 4, 3, 10]],
[1, [1, 4, 1, 1, 1, 2, 1, 3, 1, 1]], [-1, [1, 5, 3, 4, 1, 8, 10, 4, 9, 1]],
[-1, [1, 8, 3, 8, 3, 4, 9, 8, 9, 8]], [1, [1, 1, 1, 1, 1, 2, 1, 3, 2, 1]],
[1, [1, 5, 1, 3, 1, 2, 1, 2, 1, 1]], [-1, [1, 6, 10, 2, 8, 10, 2, 7, 8, 10]],
[1, [1, 1, 3, 3, 2, 2, 1, 7, 2, 1]], [-1, [1, 9, 4, 5, 10, 6, 10, 4, 8, 1]],
[-1, [1, 10, 6, 4, 1, 3, 4, 3, 2, 3]], [1, [1, 1, 1, 2, 1, 2, 2, 4, 2, 1]],
[1, [1, 1, 1, 4, 1, 2, 1, 2, 1, 1]], [1, [1, 5, 3, 1, 2, 2, 1, 2, 1, 1]],
[1, [1, 3, 1, 1, 1, 2, 3, 3, 1, 1]], [1, [1, 2, 1, 1, 1, 3, 1, 2, 1, 1]],
[1, [1, 2, 2, 2, 1, 1, 1, 7, 1, 1]], [1, [1, 4, 1, 1, 2, 2, 1, 2, 1, 1]],
[1, [1, 5, 2, 1, 1, 2, 1, 3, 1, 1]], [1, [1, 3, 1, 1, 1, 2, 2, 7, 1, 1]],
[-1, [1, 3, 5, 7, 8, 8, 9, 7, 10, 7]], [-1, [1, 5, 10, 6, 1, 10, 4, 4, 10, 10]],
[-1, [1, 3, 3, 6, 4, 5, 8, 4, 4, 1]], [-1, [1, 3, 6, 6, 6, 5, 10, 6, 8, 3]],
[1, [1, 4, 1, 1, 1, 2, 1, 3, 1, 1]], [1, [1, 2, 1, 1, 2, 3, 1, 2, 1, 1]],
[1, [1, 1, 1, 1, 1, 2, 1, 3, 1, 1]], [1, [1, 3, 1, 1, 2, 2, 1, 1, 1, 1]],
[1, [1, 4, 1, 1, 1, 2, 1, 3, 1, 1]], [1, [1, 1, 1, 1, 1, 2, 1, 2, 1, 1]],
[1, [1, 2, 1, 1, 1, 2, 1, 3, 1, 1]], [1, [1, 1, 1, 1, 1, 2, 1, 3, 1, 1]],
[1, [1, 2, 1, 1, 2, 2, 1, 1, 1, 1]], [1, [1, 5, 1, 1, 1, 2, 1, 3, 1, 1]],
[-1, [1, 9, 6, 9, 2, 10, 6, 2, 9, 10]], [-1, [1, 7, 5, 6, 10, 5, 10, 7, 9, 4]],
];

computeError($data);
?>
